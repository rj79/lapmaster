#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
    replay

    This tool is for testing purposes and is used to replay a previous race.
    It takes the original race log, and emits the corresponding lmshell
    commands which can be piped to lmshell. Optionally, the events can be
    sped up by some factor.

    :copyright: (c) 2016 by Robert Johansson.
    :license: BSD, see LICENSE for more details.
"""

import os
import lmcore
import sys
import time
import argparse
import htmlgen

DEFAULT_CLASSES='classes.csv'
DEFAULT_PERSONS='persons.csv'
DEFAULT_TEAMS='teams.csv'
DEFAULT_LOG = 'log.csv'

def loadLog(path):
    log = []
    for line in open(path, 'r'):
        log.append(line.rstrip("\r\n"))
    return log

parser = argparse.ArgumentParser()

parser.add_argument('-c', metavar='file',
                    help = 'Set class configuration file. \
Default is ' + DEFAULT_CLASSES + '.',
                    default = DEFAULT_CLASSES)

parser.add_argument('-p', metavar='file',
                    help = 'Set person configuration file. \
Default is ' + DEFAULT_PERSONS + '.',
                    default = DEFAULT_PERSONS)

parser.add_argument('-t', metavar='file',
                    help = 'Set team configuration file. \
Default is ' + DEFAULT_TEAMS + '.',
                    default = DEFAULT_TEAMS)

parser.add_argument('-o', metavar='dir',
                    help = 'Set an output directory for html.',
                    default='.')

parser.add_argument('-i', metavar='dir',
                    help = 'Use configuration files and log with default names located in dir.')

parser.add_argument('-l', metavar='file',
                    help = 'Set log file to use. Default is ' + DEFAULT_LOG + '.',
                    default=DEFAULT_LOG)

options = parser.parse_args()

if options.i:
    options.c = options.i + os.sep + DEFAULT_CLASSES
    options.p = options.i + os.sep + DEFAULT_PERSONS
    options.t = options.i + os.sep + DEFAULT_TEAMS
    if not options.l:
        options.l = options.i + os.sep + DEFAULT_LOG

config = lmcore.loadConfig(options.c, options.p, options.t)
if not config:
    sys.exit(1)

report = lmcore.Report(config)

htmlWriter = htmlgen.HTMLGenerator(config, report, options.o)
logPos = 0

lines = loadLog(options.l)

print "Type help for help."

while True:
    sys.stdout.write(": ")
    try:
        entry = sys.stdin.readline().rstrip('\n\r')
    except KeyboardInterrupt:
        print
        break

    tokens = entry.rsplit(' ')
    cmd = tokens[0]
    args = tokens[1:]

    if cmd == "step" or cmd == "s":
        count = 1
        delay = 0
        if len(args) > 0 and args[0].isdigit():
            count = int(args[0])
            if len(args) > 1 and args[0].isdigit():
                delay = int(args[1])
        try:
            for a in range(count):
                if logPos == len(lines):
                    print "Reached end of log."
                    break

                line = lines[logPos]
                report.update(line)

                if delay:
                    htmlWriter.createPages()
                    sys.stdout.write('.')
                    sys.stdout.flush()
                    time.sleep(delay)

                logPos += 1
        except KeyboardInterrupt:
            pass

        if delay:
            print

    elif cmd == "reset" or cmd == "r":
        logPos = 0
        report.reset()
    elif cmd == "help":
        print "step [n [d]]    Advance n number of steps in log with delay" \
            " d between.\n                Defaults are 1 and 0."
        print "reset           Go to start of log and clear report."
    elif cmd == "q" or cmd == "exit" or cmd == "quit":
        break
    else:
        print "what?"

    htmlWriter.createPages()
